@{
    ViewBag.Title = "Simple Chat Demo";
}

<div>
    <div class="jumbotron" data-bind="visible: !isJoined()">
        Welcome to simple chat demo. Please enter a username and click the button below.
        <form data-bind="submit:joinApp">
            <div class="form-group">
                <label for="txtUserName">Username</label>
                <input data-bind="value:newUserName" id="txtUserName" type="text" class="form-control" required />
            </div>
            <button type="submit" class="btn btn-primary">Join</button>
        </form>
    </div>

    <div class="well" data-bind="visible: isJoined()" style="display:none">
        <div class="row">
            <div class="col-md-4">
                <div class="panel panel-default">
                    <!-- Default panel contents -->
                    <div class="panel-heading">People</div>
                    <!-- List group -->
                    <ul class="list-group" data-bind="foreach: otherUsers">
                        <li class="list-group-item" data-bind="click: $parent.joinChannel, css: {active: isActive}" style="cursor: pointer;">
                            <span data-bind="text: userName"></span> <span data-bind="visible: showCount"><span class="badge" data-bind="text: textCount"></span></span>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="col-md-8">
                <div data-bind="visible: !inChannel()">
                    Now you have logged in as <span data-bind="text: thisUser().userName"></span>. For the purpose of this demo, you need to open a new window and add more user.
                    As more user join the system, it will show up on the list of people.
                </div>
                <div data-bind="visible: inChannel()">
                    <div class="messages" data-bind="with: currentUser()" style="height: 600px; overflow-y: scroll;">
                        <ul class="list-unstyled" data-bind="foreach: messages">
                            <li style="border-bottom: solid 1px #bbbbbb; padding: 2px;">
                                <span data-bind="text: name"></span><br /> 
                                <span data-bind="text: text"></span>
                            </li>
                        </ul>
                    </div>

                    <div style="margin-top: 5px;">
                        <form class="form-inline" data-bind="submit:sendMessage">
                            <input type="text" class="form-control" data-bind="value:newMessage" style="-webkit-box-shadow: none; outline: -webkit-focus-ring-color auto 0px;" />
                            <button type="submit" class="btn btn-default">Send</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts
{
<script>
    var appHub = $.connection.appHub;

    appHub.client.userJoined = function (userName) {
        console.log(userName + " joined message from server.");
        vm.userJoined(userName);
    }

    appHub.client.notifyMessage = function(sender, recipient, text) {
        console.log("Text '" + text + "' from " + sender + " to " + recipient + " sent from server.")
        vm.receiveMessage(sender, recipient, text);
    }

    $.connection.hub.disconnected(function () {
        setTimeout(function () {
            $.connection.hub.start();
        }, 5000);
    });

    $.connection.hub.start();

    var ChatChannelModel = function (firstUser, secondUser) {
        var self = this;
        self.firstUser = firstUser;
        self.secondUser = secondUser;
        self.messages = ko.observableArray().extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } });
    }

    var UserViewModel = function (userName) {
        var self = this;
        self.userName = ko.observable(userName);
        self.textCount = ko.observable(0);
        self.showCount = ko.computed(function () {
            return this.textCount() > 0;
        }, self);
        self.messages = ko.observableArray().extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } });
        self.addMessage = function (userName, text) {
            console.log("Adding new message by '" + text + "' by" + userName);
            self.messages.push(new ChatMessageModel(userName, text));
        }
        self.isActive = ko.observable(false);
    }

    var AppViewModel = function () {
        var self = this;

        self.newUserName = ko.observable('');
        self.isJoined = ko.observable(false);
        self.thisUser = ko.observable(new UserViewModel(''));
        self.otherUsers = ko.observableArray().extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } });
        self.inChannel = ko.observable(false);
        self.newMessage = ko.observable('');
        self.currentUser = ko.observable(new UserViewModel(''));

        self.joinApp = function () {
            // send message to server to join game
            //self.userJoined(self.newUserName());
            appHub.server.join(self.newUserName(), $.connection.hub.id);
        }

        self.userJoined = function (userName) {
            // temporary code to display user name once joined
            var isMe = userName === self.newUserName();

            if (isMe) {
                self.thisUser().userName(userName);
                self.isJoined(true);
            }
            else {
                var userExistsInList = ko.utils.arrayFirst(self.otherUsers(), function(user) {
                    return userName === user.userName();
                })

                if (!userExistsInList) {
                    console.log('Adding new user ' + userName + ' to list.')
                    self.otherUsers.push(new UserViewModel(userName));
                }
            }
        }

        self.joinChannel = function (targetUserName) {
            console.log('Join channel with ' + targetUserName.userName());
            self.inChannel(true);
            var current = ko.utils.arrayFirst(self.otherUsers(), function (user) {
                return targetUserName.userName() === user.userName();
            })

            self.currentUser(current);
            self.currentUser().textCount(0);
            ko.utils.arrayForEach(self.otherUsers(), function (item) {
                item.isActive(false);
            });
            self.currentUser().isActive(true);
        }

        self.sendMessage = function () {
            console.log('Send message: ' + self.newMessage());
            appHub.server.sendMessage(self.thisUser().userName(), self.currentUser().userName(), self.newMessage(), $.connection.hub.id);
            
            self.newMessage('');
        }

        self.receiveMessage = function (sender, recipient, text) {

            var senderUser = ko.utils.arrayFirst(self.otherUsers(), function (user) {
                return sender === user.userName();
            })
            if (senderUser) {
                senderUser.addMessage(sender, text);

                if(self.currentUser().userName() != sender) {
                    senderUser.textCount(senderUser.textCount() + 1);
                }
            }
        }
    }

    var vm = new AppViewModel();
    ko.applyBindings(vm);

    // testing
    //vm.otherUsers.push(new UserViewModel('Bob'));
    //vm.otherUsers.push(new UserViewModel('Jane'));
</script>
}
