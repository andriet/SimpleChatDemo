@{
    ViewBag.Title = "Home Page";
}

<div data-bind="visible: !isJoined()">
    <h2>Join</h2>
    <form data-bind="submit:joinApp">
        Username: <input data-bind="value:newUserName" required="" />
        <button type="submit">Join</button>
    </form>
</div>

<div data-bind="visible: isJoined()">
    <h2><span data-bind="text:thisUser().userName"></span></h2>

    <div style="float: left; width: 100px;">
        <ul data-bind="foreach: otherUsers">
            <li data-bind="click: $parent.joinChannel">
                <span data-bind="text: userName"></span>

            </li>
        </ul>
    </div>
    <div data-bind="visible: inChannel()" style="float:left; margin-left: 110px;">
        
        <div style="text-align: center; width: auto">Test</div>
        <div style="border: solid 1px #000000; height: 200px; width: 600px;">

        </div>
        
        <div style="margin-top: 5px;">
            <input style="width: 550px;" /> <button>Send</button>
        </div>
    </div>
</div>

@section scripts
{
<script>
    var appHub = $.connection.appHub;

    appHub.client.userJoined = function (userName) {
        console.log("User joined message from server.");
        vm.userJoined(userName);
    }

    $.connection.hub.disconnected(function () {
        setTimeout(function () {
            $.connection.hub.start();
        }, 5000);
    });

    $.connection.hub.start();

    var ChatChannelModel = function (firstUser, secondUser) {
        var self = this;
        this.firstUser = firstUser;
        this.secondUser = secondUser;
        this.messages = ko.observableArray().extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } });
    }

    var UserViewModel = function (userName) {
        var self = this;
        this.userName = ko.observable(userName);
    }

    var AppViewModel = function () {
        var self = this;

        self.newUserName = ko.observable('');
        self.isJoined = ko.observable(false);
        self.thisUser = ko.observable(new UserViewModel(''));
        self.otherUsers = ko.observableArray().extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } });
        self.inChannel = ko.observable(false);

        self.joinApp = function () {
            // send message to server to join game
            //self.userJoined(self.newUserName());
            appHub.server.join(self.newUserName());
        }

        self.userJoined = function (userName) {
            // temporary code to display user name once joined
            var isMe = userName === self.newUserName();

            if (isMe) {
                self.thisUser().userName(userName);
                self.isJoined(true);
            }
            else {
                var userExistsInList = ko.utils.arrayFirst(self.otherUsers(), function(user) {
                    return userName === user.userName();
                })

                if (!userExistsInList) {
                    self.otherUsers.push(new UserViewModel(userName));
                }
            }
        }

        self.joinChannel = function (targetUserName) {
            console.log('Join channel with ' + targetUserName.userName());
            self.inChannel(true);
        }
    }

    var vm = new AppViewModel();
    ko.applyBindings(vm);

    // testing
    //vm.otherUsers.push(new UserViewModel('Bob'));
    //vm.otherUsers.push(new UserViewModel('Jane'));
</script>
}
