@{
    ViewBag.Title = "Home Page";
}

<div data-bind="visible: !isJoined()">
    <h2>Join</h2>
    <form data-bind="submit:joinApp">
        Username: <input data-bind="value:newUserName" required="" />
        <button type="submit">Join</button>
    </form>
</div>

<div data-bind="visible: isJoined()" style="display:none">
    <h2><span data-bind="text:thisUser().userName"></span></h2>

    <div style="float: left; width: 100px;">
        <ul data-bind="foreach: otherUsers">
            <li data-bind="click: $parent.joinChannel" style="cursor: pointer;">
                <span data-bind="text: textCount"></span> <span data-bind="text: userName"></span> 
            </li>
        </ul>
    </div>
    <div data-bind="visible: inChannel()" style="float:left; margin-left: 110px;">
        
        <div style="text-align: center; width: auto">
            <span data-bind="text: currentUser().userName"></span>
        </div>
        <div data-bind="with: currentUser()" style="border: solid 1px #000000; height: 200px; width: 600px;">
            <ul data-bind="foreach: messages">
                <li>
                    <span data-bind="text: name"></span> <span data-bind="text: text"></span>
                </li>
            </ul>
        </div>

        <div style="margin-top: 5px;">
            <form data-bind="submit:sendMessage">
                <input data-bind="value:newMessage" required="" /> <button type="submit">Send</button>
            </form>
        </div>
    </div>
</div>

@section scripts
{
<script>
    var appHub = $.connection.appHub;

    appHub.client.userJoined = function (userName) {
        console.log(userName + " joined message from server.");
        vm.userJoined(userName);
    }

    appHub.client.notifyMessage = function(sender, recipient, text) {
        console.log("Text '" + text + "' from " + sender + " to " + recipient + " sent from server.")
    }

    $.connection.hub.disconnected(function () {
        setTimeout(function () {
            $.connection.hub.start();
        }, 5000);
    });

    $.connection.hub.start();

    var ChatChannelModel = function (firstUser, secondUser) {
        var self = this;
        self.firstUser = firstUser;
        self.secondUser = secondUser;
        self.messages = ko.observableArray().extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } });
    }

    var UserViewModel = function (userName) {
        var self = this;
        self.userName = ko.observable(userName);
        self.textCount = ko.observable(0);
        self.messages = ko.observableArray().extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } });
        self.addMessage = function (userName, text) {
            console.log("Adding new message by '" + text + "' by" + userName);
            self.messages.push(new ChatMessageModel(userName, text));
        }
    }

    var AppViewModel = function () {
        var self = this;

        self.newUserName = ko.observable('');
        self.isJoined = ko.observable(false);
        self.thisUser = ko.observable(new UserViewModel(''));
        self.otherUsers = ko.observableArray().extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } });
        self.inChannel = ko.observable(false);
        self.newMessage = ko.observable('');
        self.currentUser = ko.observable(new UserViewModel(''));

        self.joinApp = function () {
            // send message to server to join game
            //self.userJoined(self.newUserName());
            appHub.server.join(self.newUserName(), $.connection.hub.id);
        }

        self.userJoined = function (userName) {
            // temporary code to display user name once joined
            var isMe = userName === self.newUserName();

            if (isMe) {
                self.thisUser().userName(userName);
                self.isJoined(true);
            }
            else {
                var userExistsInList = ko.utils.arrayFirst(self.otherUsers(), function(user) {
                    return userName === user.userName();
                })

                if (!userExistsInList) {
                    console.log('Adding new user ' + userName + ' to list.')
                    self.otherUsers.push(new UserViewModel(userName));
                }
            }
        }

        self.joinChannel = function (targetUserName) {
            console.log('Join channel with ' + targetUserName.userName());
            self.inChannel(true);
            var current = ko.utils.arrayFirst(self.otherUsers(), function (user) {
                return targetUserName.userName() === user.userName();
            })

            self.currentUser(current);
        }

        self.sendMessage = function () {
            console.log('Send message: ' + self.newMessage());
            appHub.server.sendMessage(self.thisUser().userName(), self.currentUser().userName(), self.newMessage(), $.connection.hub.id);
            //if (self.currentUser) {
            //    self.currentUser().addMessage(self.thisUser().userName(), self.newMessage());
            //}
            self.newMessage('');
        }
    }

    var vm = new AppViewModel();
    ko.applyBindings(vm);

    // testing
    //vm.otherUsers.push(new UserViewModel('Bob'));
    //vm.otherUsers.push(new UserViewModel('Jane'));
</script>
}
